:PROPERTIES:
:ID:       a99e0567-5962-4cb8-b223-393541a9acd8
:END:
#+title: lambda types

in [[id:cc639b5b-3e71-4e97-8322-7367fceb41ce][lambda calculus]], having types can be kind of useful
we want to add them in a way where we dont have primative types to avoid complicating beta reduction and stuff

bc -> set of types, in some cases these are primative types
sc -> $\sigma,\tau \in Types^\rightarrow \rightarrow \sigma \rightarrow \tau \in Types^\rightarrow$

we need to ensure abstraction has suitable types , so we need to know the inputs and outputs, enforcing this is awkward though
so we need another step much like in compilers how you have type checking we need to figure this out

also we may have the situation of several assumptions for the same variable name as say
$x \lambda x : \sigma .x$
where the outer x is of type $(\sigma \rightarrow \sigma ) \rightarrow \sigma$ and the inner x is of type $\sigma$

we aim to store these type assumptions in a set which we call $\Gamma$

* cases
the way computing types work is simple

$x = ax: \Gamma \vdash x : \sigma$

$ab = app: \Gamma \vdash a: y \rightarrow z \| \Gamma \vdash b:z$

$\lambda x : \sigma . y = abs: \Gamma, x:\sigma \vdash y:z$

as a note insted of doing the statement equals the thing you do it as the statement and then a line covering the types above it
this is only really well explained by doing it
often you will need to deal with things being of the same type like g might appear twice and you goota figure that shit out
